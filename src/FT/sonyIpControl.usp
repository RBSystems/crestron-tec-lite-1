/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
System Name: TCP RESTful Comm Manager
System Number: 0.10	
Programmer: Dan Clegg
Comments: Call Services
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "SonyIPControl"
#CATEGORY "46" "Sony Displays"
#DEFINE_CONSTANT	BIGGESTSIZE	65534
#DEFINE_CONSTANT	MAXVOLUME 100
#DEFINE_CONSTANT	MINVOLUME 0
#DEFINE_CONSTANT	NEWLINE	"\n"

#DEFINE_CONSTANT	ActionMenu "AAAAAgAAAMQAAABLAw=="
#DEFINE_CONSTANT	AD "AAAAAgAAABoAAAA7Aw=="
#DEFINE_CONSTANT	Analog "AAAAAgAAAHcAAAANAw=="
#DEFINE_CONSTANT	Analog2 "AAAAAQAAAAEAAAA4Aw=="
#DEFINE_CONSTANT	AnalogRgb1 "AAAAAQAAAAEAAABDAw=="
#DEFINE_CONSTANT	Assists "AAAAAgAAAMQAAAA7Aw=="
#DEFINE_CONSTANT	Audio "AAAAAQAAAAEAAAAXAw=="
#DEFINE_CONSTANT	AudioMixDown "AAAAAgAAABoAAAA9Aw=="
#DEFINE_CONSTANT	AudioMixUp "AAAAAgAAABoAAAA8Aw=="
#DEFINE_CONSTANT	AudioQualityMode "AAAAAgAAAJcAAAB7Aw=="
#DEFINE_CONSTANT	Blue "AAAAAgAAAJcAAAAkAw=="
#DEFINE_CONSTANT	BS "AAAAAgAAAJcAAAAsAw=="
#DEFINE_CONSTANT	BSCS "AAAAAgAAAJcAAAAQAw=="
#DEFINE_CONSTANT	ChannelDown "AAAAAQAAAAEAAAARAw=="
#DEFINE_CONSTANT	ChannelUp "AAAAAQAAAAEAAAAQAw=="
#DEFINE_CONSTANT	ClosedCaption "AAAAAgAAAKQAAAAQAw=="
#DEFINE_CONSTANT	Component1 "AAAAAgAAAKQAAAA2Aw=="
#DEFINE_CONSTANT	Component2 "AAAAAgAAAKQAAAA3Aw=="
#DEFINE_CONSTANT	Confirm "AAAAAQAAAAEAAABlAw=="
#DEFINE_CONSTANT	CS "AAAAAgAAAJcAAAArAw=="
#DEFINE_CONSTANT	CursorDown "AAAAAgAAAJcAAABQAw=="
#DEFINE_CONSTANT	CursorLeft "AAAAAgAAAJcAAABNAw=="
#DEFINE_CONSTANT	CursorRight "AAAAAgAAAJcAAABOAw=="
#DEFINE_CONSTANT	CursorUp "AAAAAgAAAJcAAABPAw=="
#DEFINE_CONSTANT	Ddata "AAAAAgAAAJcAAAAVAw=="
#DEFINE_CONSTANT	DemoMode "AAAAAgAAAJcAAAB8Aw=="
#DEFINE_CONSTANT	DemoSurround "AAAAAgAAAHcAAAB7Aw=="
#DEFINE_CONSTANT	Digital "AAAAAgAAAJcAAAAyAw=="
#DEFINE_CONSTANT	DigitalToggle "AAAAAgAAAHcAAABSAw=="
#DEFINE_CONSTANT	Display "AAAAAQAAAAEAAAA6Aw=="
#DEFINE_CONSTANT	DOT "AAAAAgAAAJcAAAAdAw=="
#DEFINE_CONSTANT	DpadCenter "AAAAAgAAAJcAAABKAw=="
#DEFINE_CONSTANT	DUX "AAAAAgAAABoAAABzAw=="
#DEFINE_CONSTANT	Enter "AAAAAQAAAAEAAAALAw=="
#DEFINE_CONSTANT	EPG "AAAAAgAAAKQAAABbAw=="
#DEFINE_CONSTANT	FlashMinus "AAAAAgAAAJcAAAB5Aw=="
#DEFINE_CONSTANT	FlashPlus "AAAAAgAAAJcAAAB4Aw=="
#DEFINE_CONSTANT	FootballMode "AAAAAgAAABoAAAB2Aw=="
#DEFINE_CONSTANT	Forward "AAAAAgAAAJcAAAAcAw=="
#DEFINE_CONSTANT	Guide "AAAAAQAAAAEAAAAOAw=="
#DEFINE_CONSTANT	Green "AAAAAgAAAJcAAAAmAw=="
#DEFINE_CONSTANT	HDMI1 "AAAAAgAAABoAAABaAw=="
#DEFINE_CONSTANT	HDMI2 "AAAAAgAAABoAAABbAw=="
#DEFINE_CONSTANT	HDMI3 "AAAAAgAAABoAAABcAw=="
#DEFINE_CONSTANT	HDMI4 "AAAAAgAAABoAAABdAw=="
#DEFINE_CONSTANT	Help "AAAAAgAAAMQAAABNAw=="
#DEFINE_CONSTANT	Home "AAAAAQAAAAEAAABgAw=="
#DEFINE_CONSTANT	iManual "AAAAAgAAABoAAAB7Aw=="
#DEFINE_CONSTANT	InputButton "AAAAAQAAAAEAAAAlAw=="
#DEFINE_CONSTANT	Jump "AAAAAQAAAAEAAAA7Aw=="
#DEFINE_CONSTANT	KeypadDown "AAAAAQAAAAEAAAB1Aw=="
#DEFINE_CONSTANT	KeypadExit "AAAAAQAAAAEAAABjAw=="
#DEFINE_CONSTANT	KeypadLeft "AAAAAQAAAAEAAAA0Aw=="
#DEFINE_CONSTANT	KeypadReturn "AAAAAgAAAJcAAAAjAw=="
#DEFINE_CONSTANT	KeypadRight "AAAAAQAAAAEAAAAzAw=="
#DEFINE_CONSTANT	KeypadUp "AAAAAQAAAAEAAAB0Aw=="
#DEFINE_CONSTANT	Media "AAAAAgAAAJcAAAA4Aw=="
#DEFINE_CONSTANT	MediaAudioTrack "AAAAAQAAAAEAAAAXAw=="
#DEFINE_CONSTANT	Mode3D "AAAAAgAAAHcAAABNAw=="
#DEFINE_CONSTANT	Mute "AAAAAQAAAAEAAAAUAw=="
#DEFINE_CONSTANT	Netflix "AAAAAgAAABoAAAB8Aw=="
#DEFINE_CONSTANT	Next "AAAAAgAAAJcAAAA9Aw=="
#DEFINE_CONSTANT	Num0 "AAAAAQAAAAEAAAAJAw=="
#DEFINE_CONSTANT	Num1 "AAAAAQAAAAEAAAAAAw=="
//#DEFINE_CONSTANT	Num11 "AAAAAQAAAAEAAAAKAw=="
//#DEFINE_CONSTANT	Num12 "AAAAAQAAAAEAAAALAw=="
#DEFINE_CONSTANT	Num2 "AAAAAQAAAAEAAAABAw=="
#DEFINE_CONSTANT	Num3 "AAAAAQAAAAEAAAACAw=="
#DEFINE_CONSTANT	Num4 "AAAAAQAAAAEAAAADAw=="
#DEFINE_CONSTANT	Num5 "AAAAAQAAAAEAAAAEAw=="
#DEFINE_CONSTANT	Num6 "AAAAAQAAAAEAAAAFAw=="
#DEFINE_CONSTANT	Num7 "AAAAAQAAAAEAAAAGAw=="
#DEFINE_CONSTANT	Num8 "AAAAAQAAAAEAAAAHAw=="
#DEFINE_CONSTANT	Num9 "AAAAAQAAAAEAAAAIAw=="
#DEFINE_CONSTANT	OneTouchTimeRec "AAAAAgAAABoAAABkAw=="
#DEFINE_CONSTANT	OneTouchView "AAAAAgAAABoAAABlAw=="
#DEFINE_CONSTANT	Options "AAAAAgAAAJcAAAA2Aw=="
#DEFINE_CONSTANT	PAP "AAAAAgAAAKQAAAB3Aw=="
#DEFINE_CONSTANT	Pause "AAAAAgAAAJcAAAAZAw=="
#DEFINE_CONSTANT	PhotoFrame "AAAAAgAAABoAAABVAw=="
#DEFINE_CONSTANT	PicOff "AAAAAQAAAAEAAAA+Aw=="
#DEFINE_CONSTANT	PictureMode "AAAAAQAAAAEAAABkAw=="
#DEFINE_CONSTANT	PictureOff "AAAAAQAAAAEAAAA+Aw=="
#DEFINE_CONSTANT	Play "AAAAAgAAAJcAAAAaAw=="
#DEFINE_CONSTANT	PopUpMenu "AAAAAgAAABoAAABhAw=="
#DEFINE_CONSTANT	PowerOff "AAAAAQAAAAEAAAAvAw=="
#DEFINE_CONSTANT	Prev "AAAAAgAAAJcAAAA8Aw=="
#DEFINE_CONSTANT	Rec "AAAAAgAAAJcAAAAgAw=="
#DEFINE_CONSTANT	Red "AAAAAgAAAJcAAAAlAw=="
#DEFINE_CONSTANT	Rewind "AAAAAgAAAJcAAAAbAw=="
#DEFINE_CONSTANT	ShopRemoteControlForcedDynamic "AAAAAgAAAJcAAABqAw=="
#DEFINE_CONSTANT	Sleep "AAAAAQAAAAEAAAAvAw=="
#DEFINE_CONSTANT	SleepTimer "AAAAAQAAAAEAAAA2Aw=="
#DEFINE_CONSTANT	Stop "AAAAAgAAAJcAAAAYAw=="
#DEFINE_CONSTANT	SubTitle "AAAAAgAAAJcAAAAoAw=="
#DEFINE_CONSTANT	SyncMenu "AAAAAgAAABoAAABYAw=="
#DEFINE_CONSTANT	Teletext "AAAAAQAAAAEAAAA/Aw=="
#DEFINE_CONSTANT	TenKey "AAAAAgAAAJcAAAAMAw=="
#DEFINE_CONSTANT	TopMenu "AAAAAgAAABoAAABgAw=="
#DEFINE_CONSTANT	Tv "AAAAAQAAAAEAAAAkAw=="
#DEFINE_CONSTANT	Tv_Radio "AAAAAgAAABoAAABXAw=="
#DEFINE_CONSTANT	TvAnalog "AAAAAQAAAAEAAAA4Aw=="
#DEFINE_CONSTANT	TvAntennaCable "AAAAAQAAAAEAAAAqAw=="
#DEFINE_CONSTANT	TvInput "AAAAAQAAAAEAAAAlAw=="
#DEFINE_CONSTANT	TvPower "AAAAAQAAAAEAAAAVAw=="
#DEFINE_CONSTANT	TvSatellite "AAAAAgAAAMQAAABOAw=="
#DEFINE_CONSTANT	Video1 "AAAAAQAAAAEAAABAAw=="
#DEFINE_CONSTANT	Video2 "AAAAAQAAAAEAAABBAw=="
#DEFINE_CONSTANT	VolumeDown "AAAAAQAAAAEAAAATAw=="
#DEFINE_CONSTANT	VolumeUp "AAAAAQAAAAEAAAASAw=="
#DEFINE_CONSTANT	WakeUp "AAAAAQAAAAEAAAAuAw=="
#DEFINE_CONSTANT	Wide "AAAAAgAAAKQAAAA9Aw=="
#DEFINE_CONSTANT	WirelessSubwoofer "AAAAAgAAAMQAAAB+Aw=="
#DEFINE_CONSTANT	Yellow "AAAAAgAAAJcAAAAnAw=="     

// Sony endpoint resource paths
#DEFINE_CONSTANT	PROTOCOL	"http"
#DEFINE_CONSTANT	COMMANDS	"/sony/system"
#DEFINE_CONSTANT	SENDPOINT	"/sony/IRCC"  // "send" + "endpoint"
#DEFINE_CONSTANT	VOLPOINT	"/sony/audio"
#DEFINE_CONSTANT	GUIDEURL	"/sony/guide"
#DEFINE_CONSTANT	ACCESSCONTROLURL	"/sony/accessControl"
#DEFINE_CONSTANT	APPCONTROLURL	"/sony/appControl"
#DEFINE_CONSTANT	AVCONTENTURL	"/sony/avContent"
#DEFINE_CONSTANT	BROWSERURL	"/sony/browser"
#DEFINE_CONSTANT	ENCRYPTIONURL	"/sony/encryption"
#DEFINE_CONSTANT	NOTIFICATIONURL	"/sony/notification"
#DEFINE_CONSTANT	RECORDINGURL	"/sony/recording"
#DEFINE_CONSTANT	VIDEOSCREENURL	"/sony/videoScreen"
#DEFINE_CONSTANT	CECURL	"/sony/cec"
#DEFINE_CONSTANT	PHOTOSHAREURL	"/sony/photoshare"
#DEFINE_CONSTANT	BROADCASTLINKURL	"/sony/broadcastLink"
#DEFINE_CONSTANT	CONTENTSHAREURL	"/sony/contentshare"
#DEFINE_CONSTANT	VOLUMEQUERY	"{\"id\": 33,\"method\": \"getVolumeInformation\",\"params\": [],\"version\": \"1.0\"}"

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#PRINT_TO_TRACE

DIGITAL_INPUT IP_TVPower;
DIGITAL_INPUT IP_PowerOff;
DIGITAL_INPUT IP_WakeUp;
DIGITAL_INPUT _SKIP_,_SKIP_;
DIGITAL_INPUT IP_VolumeUp; 
DIGITAL_INPUT IP_VolumeDown;
DIGITAL_INPUT IP_Mute;      
DIGITAL_INPUT _SKIP_,_SKIP_;
DIGITAL_INPUT IP_ChannelUp;
DIGITAL_INPUT IP_ChannelDown;
DIGITAL_INPUT _SKIP_,_SKIP_;
/*DIGITAL_INPUT IP_CursorUp;
DIGITAL_INPUT IP_CursorDown;
DIGITAL_INPUT IP_CursorLeft;
DIGITAL_INPUT IP_CursorRight;*/
DIGITAL_INPUT IP_KeypadUp;
DIGITAL_INPUT IP_KeypadDown;
DIGITAL_INPUT IP_KeypadLeft;
DIGITAL_INPUT IP_KeypadRight;
DIGITAL_INPUT IP_KeypadReturn;
DIGITAL_INPUT IP_DpadCenter;
DIGITAL_INPUT IP_Confirm;
DIGITAL_INPUT IP_Enter;
DIGITAL_INPUT IP_KeypadExit;
DIGITAL_INPUT _SKIP_,_SKIP_;
DIGITAL_INPUT IP_Num0;
DIGITAL_INPUT IP_Num1;
DIGITAL_INPUT IP_Num2;
DIGITAL_INPUT IP_Num3;
DIGITAL_INPUT IP_Num4;
DIGITAL_INPUT IP_Num5;
DIGITAL_INPUT IP_Num6;
DIGITAL_INPUT IP_Num7;
DIGITAL_INPUT IP_Num8;
DIGITAL_INPUT IP_Num9;
DIGITAL_INPUT _SKIP_,_SKIP_;
DIGITAL_INPUT IP_InputButton;
//DIGITAL_INPUT IP_Analog;
//DIGITAL_INPUT IP_Analog2;
//DIGITAL_INPUT IP_AnalogRgb1;
//DIGITAL_INPUT IP_Component1;
//DIGITAL_INPUT IP_Component2;
DIGITAL_INPUT IP_HDMI1;
DIGITAL_INPUT IP_HDMI2;
DIGITAL_INPUT IP_HDMI3;
DIGITAL_INPUT IP_HDMI4;
//DIGITAL_INPUT IP_Tv_Radio;
//DIGITAL_INPUT IP_TvAnalog;
//DIGITAL_INPUT IP_TvAntennaCable;
//DIGITAL_INPUT IP_TvInput;
//DIGITAL_INPUT IP_TvSatellite;
DIGITAL_INPUT IP_Video1_Composite;
DIGITAL_INPUT IP_Video2_Component;
DIGITAL_INPUT IP_TV_ChangeChannel;
DIGITAL_INPUT _SKIP_,_SKIP_;
DIGITAL_INPUT IP_Home;
DIGITAL_INPUT IP_TopMenu;
DIGITAL_INPUT IP_ActionMenu;
DIGITAL_INPUT IP_PopUpMenu;
DIGITAL_INPUT IP_Display;
DIGITAL_INPUT IP_Yellow;
DIGITAL_INPUT IP_Blue;
DIGITAL_INPUT IP_Red;
DIGITAL_INPUT IP_Green;
DIGITAL_INPUT IP_Options;
DIGITAL_INPUT _SKIP_,_SKIP_;
DIGITAL_INPUT Hotel;
DIGITAL_INPUT _SKIP_,_SKIP_,ChangeTVVolume;
//DIGITAL_INPUT IP_AD;
//DIGITAL_INPUT IP_Assists;
//DIGITAL_INPUT IP_Audio;
/*DIGITAL_INPUT IP_AudioMixDown;
DIGITAL_INPUT IP_AudioMixUp;
DIGITAL_INPUT IP_AudioQualityMode;
DIGITAL_INPUT IP_BS;
DIGITAL_INPUT IP_BSCS;*/
//DIGITAL_INPUT IP_ClosedCaption;
//DIGITAL_INPUT IP_CS;
/*DIGITAL_INPUT IP_Ddata;
DIGITAL_INPUT IP_DemoMode;
DIGITAL_INPUT IP_DemoSurround;
DIGITAL_INPUT IP_Digital;
DIGITAL_INPUT IP_DigitalToggle;*/
//DIGITAL_INPUT IP_DOT;
//DIGITAL_INPUT IP_DUX;
/*DIGITAL_INPUT IP_EPG;
DIGITAL_INPUT IP_FlashMinus;
DIGITAL_INPUT IP_FlashPlus;
DIGITAL_INPUT IP_FootballMode;
DIGITAL_INPUT IP_Forward;
DIGITAL_INPUT IP_Guide;*/
//DIGITAL_INPUT IP_Help;
//DIGITAL_INPUT IP_iManual;
//DIGITAL_INPUT IP_Jump;
/*DIGITAL_INPUT IP_Media;
DIGITAL_INPUT IP_MediaAudioTrack;
DIGITAL_INPUT IP_Mode3D;*/
//DIGITAL_INPUT IP_Netflix;
//DIGITAL_INPUT IP_Next;
//DIGITAL_INPUT IP_OneTouchTimeRec;
//DIGITAL_INPUT IP_OneTouchView;
/*DIGITAL_INPUT IP_PAP;
DIGITAL_INPUT IP_Pause;
DIGITAL_INPUT IP_PhotoFrame;
DIGITAL_INPUT IP_PicOff;
DIGITAL_INPUT IP_PictureMode;
DIGITAL_INPUT IP_PictureOff;
DIGITAL_INPUT IP_Play;
DIGITAL_INPUT IP_Prev;
DIGITAL_INPUT IP_Rec;
DIGITAL_INPUT IP_Rewind;
DIGITAL_INPUT IP_ShopRemoteControlForcedDynamic;
DIGITAL_INPUT IP_Sleep;
DIGITAL_INPUT IP_SleepTimer;
DIGITAL_INPUT IP_Stop;
DIGITAL_INPUT IP_SubTitle;
DIGITAL_INPUT IP_SyncMenu;
DIGITAL_INPUT IP_Teletext;
DIGITAL_INPUT IP_TenKey;*/
/*DIGITAL_INPUT IP_Wide;
DIGITAL_INPUT IP_WirelessSubwoofer;
*/
 

DIGITAL_INPUT _SKIP_,_SKIP_;
           
STRING_INPUT	PSK$[32],IPAddress[32],TVChannel[32],parseRx[BIGGESTSIZE];

ANALOG_INPUT	_skip_,_skip_,setVolumeValue;


ANALOG_OUTPUT	volumeValue,_skip_,_skip_;

STRING_OUTPUT	ERR_MSG$;	
STRING_OUTPUT	RX$;


DIGITAL_OUTPUT ERR,_SKIP_,_SKIP_;

#USER_SIMPLSHARP_LIBRARY "SimplSharpNetUtils"

STRING PSK[32],IP[32],body[1024],TVCH[32],rx[BIGGESTSIZE];
INTEGER volume;

HTTPRequest client;

Callback Function MyOnError(String s)
{
	Err_msg$ = s;
	pulse(10,Err);
}

Structure attribute
{
	STRING key[255];
	STRING value[255];
};

DYNAMIC attribute ResponseAttributes[1];

STRING_FUNCTION getAttribute(string attribute)
{
	STRING tmp[65534];
	
//	tmp = client.getAttributeValue(attribute,rx);
	
	print("Attribute: %s",tmp);
	return(tmp);
}
/*Change URL$
{
	client.URL = URL$;
}*/

Change PSK$
{
	PSK = PSK$;
}

Change parseRx
{   
	rx = parseRx;
//	rx = Client.jsonParse(rx);

	print("RX: %s",rx);
}

CHANGE setVolumeValue
{
	if (setVolumeValue >= MINVOLUME && setVolumeValue <= MAXVOLUME){
		volume = setVolumeValue;
		volumeValue = setVolumeValue;		
	}
}
CHANGE TVChannel
{
	TVCH = TVChannel;
}

Change IPAddress
{
	IP = IPAddress;
}

STRING_FUNCTION changeInput(string inputString)
{	
	string functionBody[1024],inString[40],tmp[40];
	tmp = LOWER(inputString);
	
	if (tmp = "hdmi1")
	{
			inString = "extInput:hdmi?port=1";
	}
	else if (tmp = "hdmi2")
	{
		inString = "extInput:hdmi?port=2";
	}
	else if (tmp = "hdmi3")
	{
		inString = "extInput:hdmi?port=3";
	}
	else if (tmp = "hdmi4")
	{
		inString = "extInput:hdmi?port=4";
	}
	/*else if (tmp = "analog1")
	{
		instring = "tv:analog";
	}
	else if (tmp = "analog2")
	{
		instring = "tc:analogc";
	}
	else if (tmp = "rgb")
	{
		instring = "extInput:hdmi?port=4";
	}
	else if (tmp = "component1")
	{
		instring = "extInput:component?port=1";
	}
	else if (tmp = "component2")
	{
		instring = "extInput:component?port=2";
	}
	else if (tmp = "radio")
	{
		instring = "radio:fm";
	}
	else if (tmp = "tvanalog")
	{
		instring = "extInput:hdmi?port=4";
	}
	else if (tmp = "antenna")
	{
		instring = "extInput:hdmi?port=4";
	}
	else if (tmp = "satellite")
	{
		instring = "extInput:hdmi?port=4";
	}*/
	else if (tmp = "video1")
	{
		instring = "extInput:composite?port=1";
	}
	else if (tmp = "video2")
	{
		instring = "extInput:component?port=1";
	}
	else if (tmp = "composite")
	{
		instring = "extInput:composite?port=1";
	}
	else if (tmp = "component")
	{
		instring = "extInput:component?port=1";
	}
	else
	{
		instring = "";
	}

	functionBody = "{\"id\": 101,\"method\": \"setPlayContent\",\"params\": [{\"uri\": \""+ inString + "\"}],\"version\": \"1.0\"}";
	return(functionBody);
}


STRING_FUNCTION TVTuner(string channelNumber)
{
    string functionBody[1024];
	
	functionBody = "{	\"id\": 101,\"method\": \"setPlayTvContent\",\"params\": [{\"channel\": {\"dispNum\": \""+ channelNumber +"\"}}],\"version\": \"1.1\"}";
	return(functionBody);

}

STRING_FUNCTION PowerOnOff(integer isTurningOn)
{
	string functionBody[1024],trueFalse[5];
	if (isTurningOn = 1){
		trueFalse = "true";
	}
	else {
		trueFalse = "false";
	}
	functionBody = "{\"id\": 55,\"method\": \"setPowerStatus\",\"params\": [{\"status\": " + trueFalse + "}],\"version\": \"1.0\"}";
	return(functionBody);
}


FUNCTION CEC_Send(string str)
{
	SIGNED_LONG_INTEGER result;
	
	Client.URL = PROTOCOL + "://" + IP + SENDPOINT;

	//result = Client.SonyIPControl_SendCommand(str,PSK);
}

FUNCTION IP_Send(string str, string API)
{
	SIGNED_LONG_INTEGER result;
	STRING headers[40];
	headers = "X-Auth-PSK: " + PSK + "";

	Client.URL = PROTOCOL + "://" + IP + API;
	print("Sending %s,%s,%s",API,headers,str);
	

	result = Client.Post(str,headers);
}

FUNCTION SetVol(integer val)
{
	SIGNED_LONG_INTEGER result;
	SIGNED_INTEGER ContentLength;
	STRING headers[1024],bodyStr[1024],CLString[1024];

	bodyStr = "{\"method\":\"setAudioVolume\",\"version\":\"1.0\",\"id\":1,\"params\":[{\"target\":\"speaker\",\"volume\":\"" + ITOA(val) + "\"}]}";
	ContentLength = len(bodyStr);
	CLString = ITOA(ContentLength);
	
	headers = "X-Auth-PSK: " + PSK + ";DNT: 1;Content-Type: text/plain;Accept-Encoding: gzip;Accept: */*;Content-Length: " + CLString;

	Client.URL = PROTOCOL + "://" + IP + VOLPOINT;

	result = Client.Post(bodyStr,headers);
}

FUNCTION VolumeUpDown(integer up)
{
	SIGNED_LONG_INTEGER result;
	SIGNED_INTEGER ContentLength,scale;
	STRING headers[1024],bodyStr[1024],CLString[1024],tmpVol[100];
    bodyStr = "";
	scale = BIGGESTSIZE / MAXVOLUME;

	if (up = 1)
	{
		bodyStr = "{\"method\":\"setAudioVolume\",\"version\":\"1.0\",\"id\":1,\"params\":[{\"target\":\"speaker\",\"volume\":\"+1\"}]}";
	}
	else {
		bodyStr = "{\"method\":\"setAudioVolume\",\"version\":\"1.0\",\"id\":1,\"params\":[{\"target\":\"speaker\",\"volume\":\"-1\"}]}";
	}
	ContentLength = len(bodyStr);
	CLString = ITOA(ContentLength);
	
	headers = "X-Auth-PSK: " + PSK + ";DNT: 1;Content-Type: text/plain;Accept-Encoding: gzip;Accept: */*;Content-Length: " + CLString;

	Client.URL = PROTOCOL + "://" + IP + VOLPOINT;

	result = Client.Post(bodyStr,headers);

	IP_SEND(VOLUMEQUERY,VOLPOINT);
    
	tmpVol = getAttribute("result.0.volume");
	
	volumeValue = atoi(tmpVol) * scale;
}


STRING_FUNCTION GetCurrentSource()
{
	string functionBody[1024],rxStr[BIGGESTSIZE];
	
	functionBody = "{\"id\": 50,\"method\": \"getPowerStatus\",\"params\": [],\"version\": \"1.0\"}";
	
	IP_Send(functionBody,COMMANDS);
	
}

/*******************************************************************************************
  Event Handlers
*******************************************************************************************/

Release Hotel
{
	//CEC_Send(Display);
	//CEC_Send(Mute);
	//CEC_Send(VolumeUp);
	//CEC_Send(Home);
}

RELEASE ChangeTVVolume
{
	SetVol(volume);
}


RELEASE IP_PowerOff
{
	body = PowerOnOff(0);

	//CEC_Send(PowerOff);
	IP_Send(body,COMMANDS);
}

RELEASE IP_TVPower
{
	body = PowerOnOff(1);

	//CEC_Send(PowerOff);
	IP_Send(body,COMMANDS);
	//CEC_Send(TvPower);
}

RELEASE IP_ActionMenu
{ 
	//CEC_Send(ActionMenu);
}

/*RELEASE IP_Analog
{ 
	//CEC_Send(Analog);
}

RELEASE IP_Analog2
{
	 //CEC_Send(Analog2);

}

RELEASE IP_AnalogRgb1
{
	 //CEC_Send(AnalogRgb1);

}*/

RELEASE IP_ChannelDown
{
	 //CEC_Send(ChannelDown);
}

RELEASE IP_ChannelUp
{
	//CEC_Send(ChannelUp);
}

/*RELEASE IP_Component1
{
	 //CEC_Send(Component1);

}

RELEASE IP_Component2
{
	 //CEC_Send(Component2);
}*/

RELEASE IP_Confirm
{
	 //CEC_Send(Confirm);

}

RELEASE IP_Display
{
	 //CEC_Send(Display);

}

RELEASE IP_DpadCenter
{
	 //CEC_Send(DpadCenter);
}

RELEASE IP_Enter
{
	//CEC_Send(Enter);
}

RELEASE IP_HDMI1
{
	body = changeInput("hdmi1");
	IP_Send(body,AVCONTENTURL);
	//CEC_Send(HDMI1);
}

RELEASE IP_HDMI2
{
	body = changeInput("hdmi2");
	IP_Send(body,AVCONTENTURL);
	//CEC_Send(HDMI2);
}

RELEASE IP_HDMI3
{	
	body = changeInput("hdmi3");
	IP_Send(body,AVCONTENTURL);
	//CEC_Send(HDMI3);
}

RELEASE IP_HDMI4
{ 
	body = changeInput("hdmi4");
	IP_Send(body,AVCONTENTURL);
	//CEC_Send(HDMI4); 
}

RELEASE IP_Home
{
	//CEC_Send(Home);
}

RELEASE IP_InputButton
{
	 //CEC_Send(InputButton);

}

RELEASE IP_KeypadDown
{
	 //CEC_Send(KeypadDown);

}

RELEASE IP_KeypadExit
{
	 //CEC_Send(KeypadExit);

}

RELEASE IP_KeypadLeft
{
	 //CEC_Send(KeypadLeft);

}

RELEASE IP_KeypadReturn
{
	//CEC_Send(KeypadReturn); 
}

RELEASE IP_KeypadRight
{
	 //CEC_Send(KeypadRight);

}

RELEASE IP_KeypadUp
{
	 //CEC_Send(KeypadUp);

}

RELEASE IP_Mute
{
	 //CEC_Send(Mute);

}

RELEASE IP_Num0
{
	 //CEC_Send(Num0);

}

RELEASE IP_Num1
{
	//CEC_Send(Num1);
	 
}

RELEASE IP_Num2
{
	//CEC_Send(Num2);
	 
}

RELEASE IP_Num3
{
	//CEC_Send(Num3);
	 
}

RELEASE IP_Num4
{
	//CEC_Send(Num4);
	 
}

RELEASE IP_Num5
{
	//CEC_Send(Num5);
	 
}

RELEASE IP_Num6
{
	//CEC_Send(Num6);
	 
}

RELEASE IP_Num7
{
	//CEC_Send(Num7);
	 
}

RELEASE IP_Num8
{
	//CEC_Send(Num8);
	 
}

RELEASE IP_Num9
{
	//CEC_Send(Num9);
	 
}

RELEASE IP_Options
{
	 //CEC_Send(Options);

}

RELEASE IP_TopMenu
{
	 //CEC_Send(TopMenu);

}

/*RELEASE IP_Tv_Radio
{
	 //CEC_Send(Tv_Radio);

}

RELEASE IP_TvAnalog
{
	 //CEC_Send(TvAnalog);

}

RELEASE IP_TvAntennaCable
{
	 //CEC_Send(TvAntennaCable);

}*/

RELEASE IP_TV_ChangeChannel
{
	body = TVTuner(TVCH);
	IP_Send(body,AVCONTENTURL);
	 //CEC_Send(TvInput);

}

RELEASE IP_TvPower
{
	body = PowerOnOff(1);

	 //CEC_Send(TvPower);
	IP_Send(body,COMMANDS);
}

/*RELEASE IP_TvSatellite
{
	 //CEC_Send(TvSatellite);

}*/

RELEASE IP_Video1_Composite
{
	body = changeInput("composite");
	IP_Send(body,AVCONTENTURL);
	 //CEC_Send(Video1);

}

RELEASE IP_Video2_Component
{
	body = changeInput("component");
	IP_Send(body,AVCONTENTURL);
	 //CEC_Send(Video2);

}

RELEASE IP_VolumeDown
{
	//body = VolumeUpDown(0);
	//CEC_Send(VolumeDown);
	//IP_Send(body,VOLPOINT);
	VolumeUpDown(0);
}

RELEASE IP_VolumeUp
{ 
	//body = VolumeUpDown(1);
	//IP_Send(body,VOLPOINT);
	//CEC_Send(VolumeUp); 
	VolumeUpDown(1);
}

Callback Function MyOnReceive(String s)
{
	TRACE("On Rx$");
	RX$ = s;
}


Function Init()
{
	RegisterDelegate(client,OnResponse,MyOnReceive);
	RegisterDelegate(client,OnError,MyOnError);
	PSK = "";
	IP = "";
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	WaitForInitializationComplete();
	Init();
}
