/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Brigham Young University
System Name: Track CEC Volume
System Number: 1.6
Programmer: Dan Clegg
Comments: Track Volume when dealing with a CEC display
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Track CEC Volume"
#CATEGORY "46" "Volume"
#DEFINE_CONSTANT	OVERAGE	2
#DEFINE_CONSTANT	MAXVOLUME	100
#DEFINE_CONSTANT	MINVOLUME	0
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING

#ENABLE_TRACE
#Print_TO_TRACE


/*******************************************************************************************
  DIGITAL_INPUT, ANALOG_INPUT, STRING_INPUT, BUFFER_INPUT inputs and DIGITAL_OUTPUT, 
  ANALOG_OUTPUT, STRING_OUTPUT and SERIAL_OUTPUT outputs
*******************************************************************************************/
DIGITAL_INPUT Display_Is_CEC, Display_Is_Blank,Input_Press,Volume_Up,Volume_Down,Slider_Press,Reset_Volume,Mute_Off,Mute_On,Mute_Toggle;

ANALOG_INPUT Slider_Set_Volume_Value,Display_Volume_Value,Volume_fb_Value;

DIGITAL_OUTPUT Display_Volume_Up,Display_Volume_Down,Mute_Off_fb,Mute_On_fb;

ANALOG_OUTPUT _Volume,_skip_,_skip_,_skip_,_skip_,Reset_Slider_Set_Volume_Value,Reset_Display_Volume_Value,Reset_Volume_fb_Value;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

INTEGER BIGGESTSIZE,Current_Volume,Track_Manually,Scale_Factor,Goal,Volume_at_slider_press,Wait_For_Slider_Release,Enabled, Muted;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
FUNCTION ResetValues(){
	if(Enabled = 1){
		Mute_Off_fb = 0;
		Mute_On_fb = 0;
	}
}

FUNCTION MUTE(){
	if(Enabled = 1){
		ResetValues();
		Muted = 1;
		Mute_On_fb = 1;
		Current_Volume = 0;
	}
}

FUNCTION UNMUTE(){	
	if(Enabled = 1){
		ResetValues();
		Mute_Off_fb = 1;
		Muted = 0;
		Current_Volume = 0;
	}
}

Function ResetVolume()
{
    Current_Volume = 0;
	//Print("Setting volume to %d",Current_Volume);
	_Volume = Current_Volume;
	Reset_Slider_Set_Volume_Value = Current_Volume;
	Reset_Display_Volume_Value = Current_Volume;
	Reset_Volume_fb_Value = Current_Volume;
}

Function Up(integer adjustVolumeValue)
{
	INTEGER x;
	
	if(Muted = 1){
		UNMUTE();
	}

	////Print("Sending Display_Volume_Up = 1");
	Display_Volume_Up = 1;
	Delay(10);
	//Print("Sending Display_Volume_Up = 0");
	Display_Volume_Up = 0;

	if (adjustVolumeValue = 1){
		//Print("Adjusting volume value via Up() function\n");
		//Current_Volume = Current_Volume + (Scale_Factor S/ 2); // S/ is a signed int division (see help on integers)
		//Print("Function: Current_Volume = Current_Volume + (Scale_Factor / 2); Current_Volume: %d",Current_Volume);
		Current_Volume = Current_Volume + Scale_Factor;
		_Volume = Current_Volume;
	}
	else {
		//Print("Adjusting volume value outside of Up()\n");
     	// Do nothing
	}
}

Function Down(integer adjustVolumeValue)
{	
	INTEGER x;
	if(Muted = 1){
		Up(0);
	}
	Display_Volume_Down = 1;
	Delay(10);
	Display_Volume_Down = 0;    

	if (adjustVolumeValue = 1){
		//Print("Adjusting volume value via Down() function\n");
		//Current_Volume = Current_Volume - (Scale_Factor S/ 2); // S/ is a signed int division (see help on integers)
		//Print("Function: Current_Volume = Current_Volume - (Scale_Factor / 2); Current_Volume: %d",Current_Volume);
		Current_Volume = Current_Volume - Scale_Factor;
		_Volume = Current_Volume;
	}
	else {
		//Print("Adjusting volume value outside of Down()\n");
		// Do nothing
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Display_Is_Blank
{
	_Volume = MINVOLUME;
}

RELEASE Input_Press
{
	ResetVolume();
}

PUSH Display_Is_CEC
{
    ResetVolume();
	//Print("Setting Track Manually to TRUE");
	Track_Manually = 1;
	Enabled = Display_Is_CEC;	    
}

RELEASE Display_Is_CEC
{
    ResetVolume();
	//Print("Setting Track Manually to FALSE");
	Track_Manually = 0;	    
}

RELEASE Reset_Volume
{
	ResetVolume();
}

RELEASE Volume_Up
{
	INTEGER c,diff,compareVal;
	compareVal = BIGGESTSIZE - Scale_Factor; // The absolute max we'll allow a normal Up operation to occur
	//Print("Current_Volume: %d",Current_Volume);
	if ( Current_Volume S>= compareVal || Current_Volume = BIGGESTSIZE ) // S>= is a signed int operation (see help on integers)
	{
		//Print("Current_Volume >= compareVal, Defaulting to BIGGESTSIZE");
		c = BIGGESTSIZE;
	}
	else {
		//Print("Current_Volume NOT >= compareVal, Non-default operation");
		c = Current_Volume + Scale_Factor;
	}
	//Print("compareVal: %d\n",compareVal);
	//Print("c: %d \n",c);

	if(Track_Manually = 1){
		//Print("Current_Volume: %d, c: %d", Current_Volume, c);
    	Current_Volume = c;
		_Volume = Current_Volume;
		Up(0);
	}
}

RELEASE Volume_Down
{
	INTEGER c,diff,compareVal;
	compareVal = MINVOLUME + Scale_Factor; // The absolute value where we'll allow a Down operation to occur
	//Print("Current_Volume: %d",Current_Volume);
	if ( Current_Volume S<= compareVal || Current_Volume = MINVOLUME || Current_Volume S<= Scale_Factor ) { // S<= is a signed int operation (see help on integers)
		//Print("Current_Volume <= compareVal, Defaulting to MINVOLUME");
		c = MINVOLUME;
	}
	else {
		//Print("Current_Volume NOT <= compareVal, Non-default operation");
		c = Current_Volume - Scale_Factor;
	}

	//Print("compareVal: %d\n",compareVal);
	//Print("c: %d \n",c);

	if(Track_Manually = 1){
		//Print("Current_Volume: %d, c: %d", Current_Volume, c);
		Current_Volume = c;
		_Volume = Current_Volume;
		Down(0);
	}
}
 
PUSH Slider_Press
{
	If (Wait_For_Slider_Release = 0){
		Volume_at_slider_press = Slider_Set_Volume_Value;
		Wait_For_Slider_Release = 1;
	}
}

RELEASE Slider_Press
{
	INTEGER Desired_Volume,steps,x;
	Desired_Volume = Slider_Set_Volume_Value;
	////Print("*************");
	
	////Print("*************");

	////Print("*************");
	
	//Print("*** Desired_Volume: %d",Desired_Volume);
	////Print("*** Volume at slider press: %d", Volume_at_slider_press);
    if ( Track_Manually = 1){
		if ( Desired_Volume S< Volume_at_slider_press) { // S< is a signed int operation (see help on integers)
			// It seems that we're executing 2.1 - 2.8 times more presses than we should be, hence OVERAGE
			//steps = (Volume_at_slider_press - Desired_Volume) S/ Scale_Factor S/ OVERAGE; // S/ is a signed int operation (see help on integers)
			steps = ( Volume_at_slider_press - Desired_Volume ) S/ Scale_Factor;
			////Print("*** Steps Down: %d",steps);
			for (x = 1 to steps)
			{
				Down(1);
			}
		}
		else if ( Desired_Volume > Volume_at_slider_press) {
			// It seems that we're executing 2.1 - 2.8 times more presses than we should be, hence OVERAGE
			//steps = (Desired_Volume - Volume_at_slider_press) S/ Scale_Factor S/ OVERAGE; // S/ is a signed int operation (see help on integers)
			steps = (Desired_Volume - Volume_at_slider_press) S/ Scale_Factor;
			////Print("*** Steps Up: %d",steps);
			for (x = 1 to steps)
			{
				Up(1);
			}
		}
		else {
			// Do nothing
		}
	}
	Wait_For_Slider_Release = 0;	
	//Print("Function: Slider_Set_Volume_Value, Goal: %d", Goal);
}

CHANGE Slider_Set_Volume_Value
{
	Goal = Slider_Set_Volume_Value;
	//Print("Function: CHANGE Slider_Set_Volume_Value, Goal: %d", Goal);
}

CHANGE Volume_fb_Value
{
	Current_Volume = Volume_fb_Value;
	//Print("Function: CHANGE Volume_fb_Value, Volume_fb_Value: %d", Volume_fb_Value);
	//Print("Function: CHANGE Volume_fb_Value, Current_Volume: %d", Current_Volume);
}

RELEASE Mute_On
{
	if(Enabled = 1){
		MUTE();
	}
}


RELEASE Mute_Off
{
	if(Enabled = 1){
		UNMUTE();
	}
}

RELEASE Mute_Toggle
{
	//Print("Got into Mute Toggle");
	if(Enabled = 1){
		if( Muted = 0 )
		{
			MUTE();	
		}
		else
		{
			UNMUTE();
		}
	}
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	BIGGESTSIZE = 65534;
	Current_Volume = 0;
	Track_Manually = 0;
	Scale_Factor = BIGGESTSIZE S/ MAXVOLUME;
	Goal = 0;
	Wait_For_Slider_Release = 0;

	//Print("Current_Volume: %d", Current_Volume);
	//Print("BIGGESTSIZE: %d", BIGGESTSIZE);
	//Print("MAXVOLUME: %d", MAXVOLUME);
	//Print("MINVOLUME: %d", MINVOLUME);
	//Print("Track_Manually: %d", Track_Manually);
	//Print("Scale_Factor: %d", Scale_Factor);
	//Print("Goal: %d", Goal);
	//Print("Wait_For_Slider_Release: %d", Wait_For_Slider_Release);

	

	WaitForInitializationComplete();
}
