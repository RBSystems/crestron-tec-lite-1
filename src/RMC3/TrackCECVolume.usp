/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Brigham Young University
System Name: Metrics Proxy
System Number: 1.0.0
Programmer: Dan Clegg
Comments: Track Volume when dealing with a CEC display
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Track CEC Volume"
#CATEGORY "46" "Volume"
#DEFINE_CONSTANT	BIGGESTSIZE	65534
#DEFINE_CONSTANT	OVERAGE	2
#DEFINE_CONSTANT	MAXVOLUME	100
#DEFINE_CONSTANT	MINVOLUME	0
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#PRINT_TO_TRACE


/*******************************************************************************************
  DIGITAL_INPUT, ANALOG_INPUT, STRING_INPUT, BUFFER_INPUT inputs and DIGITAL_OUTPUT, 
  ANALOG_OUTPUT, STRING_OUTPUT and SERIAL_OUTPUT outputs
*******************************************************************************************/
DIGITAL_INPUT Display_Is_CEC,Volume_Up,Volume_Down,Slider_Press,Reset_Volume;

ANALOG_INPUT Volume;

DIGITAL_OUTPUT Display_Volume_Up,Display_Volume_Down;

ANALOG_OUTPUT _Volume;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

INTEGER Current_Volume,Track_Manually,Scale_Factor,Goal,Volume_at_slider_press,Wait_For_Slider_Release;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function ResetVolume()
{
    Current_Volume = 0;
	Print("Setting volume to %d",Current_Volume);
	_Volume = Current_Volume;
}

Function Up(integer adjustVolumeValue)
{
	INTEGER x;
	Display_Volume_Up = 1;
	Delay(10);
	Display_Volume_Up = 0;

	if (adjustVolumeValue = 1){
		Print("Adjusting volume value via Up() function\n");
		Current_Volume = Current_Volume + (Scale_Factor / 2);
		//Current_Volume = Current_Volume + Scale_Factor;
		_Volume = Current_Volume;
	}
	else {
		Print("Adjusting volume value outside of Up()\n");
     	// Do nothing
	}
}

Function Down(integer adjustVolumeValue)
{	
	INTEGER x;
	Display_Volume_Down = 1;
	Delay(10);
	Display_Volume_Down = 0;
    
	if (adjustVolumeValue = 1){
		Print("Adjusting volume value via Down() function\n");
		Current_Volume = Current_Volume - (Scale_Factor / 2);
		//Current_Volume = Current_Volume - Scale_Factor;
		_Volume = Current_Volume;
	}
	else {
		Print("Adjusting volume value outside of Down()\n");
		// Do nothing
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Display_Is_CEC
{
    ResetVolume();
	Print("Setting Track Manually to TRUE");
	Track_Manually = 1;	    
}

RELEASE Display_Is_CEC
{
    ResetVolume();
	Print("Setting Track Manually to FALSE");
	Track_Manually = 0;	    
}

RELEASE Reset_Volume
{
	ResetVolume();
}

RELEASE Volume_Up
{
	INTEGER c,diff,compareVal;
	compareVal = BIGGESTSIZE - Scale_Factor;
	Print("Current_Volume: %d",Current_Volume);
	if ( Current_Volume >= compareVal )
	{
		Print("Current_Volume >= compareVal, Defaulting to BIGGESTSIZE");
		c = BIGGESTSIZE;
	}
	else {
		Print("Current_Volume NOT >= compareVal, Non-default operation");
		c = Current_Volume + Scale_Factor;
	}
	Print("compareVal: %d\n",compareVal);
	Print("c: %d \n",c);

	if(Track_Manually = 1){
    	Current_Volume = c;
		_Volume = Current_Volume;
		Up(0);
	}
}

RELEASE Volume_Down
{
	INTEGER c,diff,compareVal;
	compareVal = MINVOLUME + Scale_Factor;
	Print("Current_Volume: %d",Current_Volume);
	if ( Current_Volume <= compareVal ) {
		Print("Current_Volume <= compareVal, Defaulting to MINVOLUME");
		c = MINVOLUME;
	}
	else {
		Print("Current_Volume NOT <= compareVal, Non-default operation");
		c = Current_Volume - Scale_Factor;
	}

	Print("compareVal: %d\n",compareVal);
	Print("c: %d \n",c);

	if(Track_Manually = 1){
		Current_Volume = Current_Volume - Scale_Factor;
		_Volume = Current_Volume;
		Down(0);
	}
}
 
PUSH Slider_Press
{
	If (Wait_For_Slider_Release = 0){
		Volume_at_slider_press = Volume;
		Wait_For_Slider_Release = 1;
	}
}

RELEASE Slider_Press
{
	INTEGER Desired_Volume,steps,x;
	Desired_Volume = Volume;
	//PRINT("*************");
	
	//Print("*************");

	//Print("*************");
	
	Print("*** Desired_Volume: %d",Desired_Volume);
	//Print("*** Volume at slider press: %d", Volume_at_slider_press);
    if ( Track_Manually = 1){
		if ( Desired_Volume < Volume_at_slider_press) {
			// It seems that we're executing 2.1 - 2.8 times more presses than we should be, hence OVERAGE
			steps = (Volume_at_slider_press - Desired_Volume) / Scale_Factor / OVERAGE;
			//Print("*** Steps Down: %d",steps);
			for (x = 1 to steps)
			{
				Down(1);
			}
		}
		else if ( Desired_Volume > Volume_at_slider_press) {
			// It seems that we're executing 2.1 - 2.8 times more presses than we should be, hence OVERAGE
			steps = (Desired_Volume - Volume_at_slider_press) / Scale_Factor / OVERAGE;
			//Print("*** Steps Up: %d",steps);
			for (x = 1 to steps)
			{
				Up(1);
			}
		}
		else {
			// Do nothing
		}
	}
	Wait_For_Slider_Release = 0;	
}

CHANGE Volume
{
	Goal = Volume;
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	Current_Volume = 0;
	Track_Manually = 0;
	Scale_Factor = BIGGESTSIZE / MAXVOLUME;
	Goal = 0;
	Wait_For_Slider_Release = 0;

	WaitForInitializationComplete();
}
