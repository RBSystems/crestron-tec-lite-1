/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Brigham Young University
System Name: Aurora IPX Series Protocol Controller
System Number: 0.1.0
Programmer: Dan Clegg
Comments: Handle the communication for the Aurora IPX and QXP-2-IPX devices
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Aurora IPX Series Protocol Controller"
#CATEGORY "46" "Aurora IPX"
#DEFINE_CONSTANT	BIGGESTSIZE	65534
#DEFINE_CONSTANT	NEWLINE	"\n"
#OUTPUT_SHIFT 10
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#PRINT_TO_TRACE
#ENABLE_TRACE

/*******************************************************************************************
  DIGITAL_INPUT, ANALOG_INPUT, STRING_INPUT, BUFFER_INPUT inputs and DIGITAL_OUTPUT,
  ANALOG_OUTPUT, STRING_OUTPUT and SERIAL_OUTPUT outputs
*******************************************************************************************/
DIGITAL_INPUT enable, openConnection;
DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_;

STRING_INPUT	parseRx[BIGGESTSIZE],QXP_IP[32],Transceiver_IP[32],Receiver_IP[32];

ANALOG_INPUT	_skip_,_skip_,QXP_port;


//ANALOG_OUTPUT	speakerVolumeValue,headphoneVolumeValue,volumeToPanel;

//STRING_OUTPUT	SelectedSrcCh$,_skip_,ERR_MSG$,
STRING_OUTPUT RX$,ERR_MSG$;

//DIGITAL_OUTPUT	setToHDMI1,setToHDMI2,setToHDMI3,setToHDMI4,powerIsOn,volumeIsMuted;

DIGITAL_OUTPUT _SKIP_,ERR, CommErr;


#USER_SIMPLSHARP_LIBRARY "SimplSharpNetUtils"
#USER_SIMPLSHARP_LIBRARY "SimplSharpStringUtils"

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

STRING Controller_IP[32],body[1024],rx[BIGGESTSIZE],rxStr[BIGGESTSIZE],port[4];
STRING parsedMessage[1000],APIVersionToRequire[5];
INTEGER isEnabled;//,volume,volumeStepValue,incrementDecrementStepValue,minVolume,maxVolume,headphoneAudio,speakerAudio;

HTTPRequest client;
StringUtils stringUtility;

/*******************************************************************************************
  Functions -- No Editing
*******************************************************************************************/

Function Log(string msg)
{
	Print("\n%s",msg);
	TRACE("Trace: %s",msg);

}

Function Error(string msg)
{
	Log(msg);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/******************
//
// !!! MOVE ACTIVE SIGNAL EVENTS INTO THIS SECTION !!!
//
******************/

FUNCTION connect() {
	// telnet ip port

	// require blueriver_api version

}

FUNCTION disconnect() {

	// quit telnet
}


FUNCTION sendMessage(string resource, string body) {
	SIGNED_LONG_INTEGER result;
	STRING revisedString[100];
	TRACE("Is enabled: %d",isEnabled);
	if (isEnabled = 1)
	{
//		revisedString = "sony/" + resource;
		
//		result = client.SendCommand(URL, revisedString, body, PSK);
//		TRACE("result %ld",result);
	}
}
///////////////
// API Method Events
///////////////
//////////////////////////////////////////////
// !!!!!!!! SYSTEM SETUP EVENTS -- NO EDITING

CHANGE QXP_IP
{
	Controller_IP = QXP_IP;
}

CHANGE QXP_Port
{
	port = itoa(QXP_Port);
}
                              	
CHANGE enable
{
	isEnabled = enable;
}

CHANGE parseRx
{
	rx = parseRx;
	
	Trace("parseRx: %s",parseRx);
}

Callback Function OnReceive(String s)
{
	//RX$ = "";
	Trace("On Receive: %s",s);
	rxstr = s;

	Trace("On Receive rxstr: %s",s);
	RX$ = s;

	Trace("On Receive rx: %s",s);
	ERR = 0;
}

Callback Function OnError(String s)
{	
	trace("Client Error: %s", client.errorMessage);
	rxstr = s;
	ERR_msg$ = s;
	ERR = 1;	
}

Function Init()
{
	RegisterDelegate(client,OnResponse,OnReceive);
	RegisterDelegate(client,OnError,OnError);
	Controller_IP = "";
	rx = "";
	rxStr = "";
	port = "";
	body = "";
	APIVersionToRequire = "2.4.4";
	parsedMessage = "";
	isEnabled = 0;
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    WaitForInitializationComplete();

	Init();
}
